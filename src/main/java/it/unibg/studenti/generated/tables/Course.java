/*
 * This file is generated by jOOQ.
 */
package it.unibg.studenti.generated.tables;


import it.unibg.studenti.generated.CourseManagement;
import it.unibg.studenti.generated.Keys;
import it.unibg.studenti.generated.tables.records.CourseRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Course extends TableImpl<CourseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>course_management.course</code>
     */
    public static final Course COURSE = new Course();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CourseRecord> getRecordType() {
        return CourseRecord.class;
    }

    /**
     * The column <code>course_management.course.idcourse</code>.
     */
    public final TableField<CourseRecord, Integer> IDCOURSE = createField(DSL.name("idcourse"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>course_management.course.code</code>.
     */
    public final TableField<CourseRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>course_management.course.ssd</code>.
     */
    public final TableField<CourseRecord, String> SSD = createField(DSL.name("ssd"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>course_management.course.name</code>.
     */
    public final TableField<CourseRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>course_management.course.credits</code>.
     */
    public final TableField<CourseRecord, Double> CREDITS = createField(DSL.name("credits"), SQLDataType.DOUBLE.defaultValue(DSL.inline("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>course_management.course.students</code>.
     */
    public final TableField<CourseRecord, Double> STUDENTS = createField(DSL.name("students"), SQLDataType.DOUBLE.defaultValue(DSL.inline("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>course_management.course.hours</code>.
     */
    public final TableField<CourseRecord, Double> HOURS = createField(DSL.name("hours"), SQLDataType.DOUBLE.defaultValue(DSL.inline("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>course_management.course.param</code>.
     */
    public final TableField<CourseRecord, String> PARAM = createField(DSL.name("param"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>course_management.course.period</code>.
     */
    public final TableField<CourseRecord, Double> PERIOD = createField(DSL.name("period"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>course_management.course.year</code>.
     */
    public final TableField<CourseRecord, Double> YEAR = createField(DSL.name("year"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>course_management.course.yearOff</code>.
     */
    public final TableField<CourseRecord, String> YEAROFF = createField(DSL.name("yearOff"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private Course(Name alias, Table<CourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Course(Name alias, Table<CourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>course_management.course</code> table reference
     */
    public Course(String alias) {
        this(DSL.name(alias), COURSE);
    }

    /**
     * Create an aliased <code>course_management.course</code> table reference
     */
    public Course(Name alias) {
        this(alias, COURSE);
    }

    /**
     * Create a <code>course_management.course</code> table reference
     */
    public Course() {
        this(DSL.name("course"), null);
    }

    public <O extends Record> Course(Table<O> child, ForeignKey<O, CourseRecord> key) {
        super(child, key, COURSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : CourseManagement.COURSE_MANAGEMENT;
    }

    @Override
    public Identity<CourseRecord, Integer> getIdentity() {
        return (Identity<CourseRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CourseRecord> getPrimaryKey() {
        return Keys.KEY_COURSE_PRIMARY;
    }

    @Override
    public List<UniqueKey<CourseRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_COURSE_UQ_COURSES);
    }

    @Override
    public Course as(String alias) {
        return new Course(DSL.name(alias), this);
    }

    @Override
    public Course as(Name alias) {
        return new Course(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Course rename(String name) {
        return new Course(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Course rename(Name name) {
        return new Course(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, String, String, Double, Double, Double, String, Double, Double, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}

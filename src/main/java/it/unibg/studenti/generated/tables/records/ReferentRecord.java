/*
 * This file is generated by jOOQ.
 */
package it.unibg.studenti.generated.tables.records;


import it.unibg.studenti.generated.tables.Referent;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReferentRecord extends UpdatableRecordImpl<ReferentRecord> implements Record4<Integer, Integer, Double, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>course_management.referent.staff_idstaff</code>.
     */
    public void setStaffIdstaff(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>course_management.referent.staff_idstaff</code>.
     */
    public Integer getStaffIdstaff() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>course_management.referent.course_idcourse</code>.
     */
    public void setCourseIdcourse(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>course_management.referent.course_idcourse</code>.
     */
    public Integer getCourseIdcourse() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>course_management.referent.hours</code>.
     */
    public void setHours(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>course_management.referent.hours</code>.
     */
    public Double getHours() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>course_management.referent.type</code>.
     */
    public void setType(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>course_management.referent.type</code>.
     */
    public String getType() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<Integer, Integer, String> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Double, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, Integer, Double, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Referent.REFERENT.STAFF_IDSTAFF;
    }

    @Override
    public Field<Integer> field2() {
        return Referent.REFERENT.COURSE_IDCOURSE;
    }

    @Override
    public Field<Double> field3() {
        return Referent.REFERENT.HOURS;
    }

    @Override
    public Field<String> field4() {
        return Referent.REFERENT.TYPE;
    }

    @Override
    public Integer component1() {
        return getStaffIdstaff();
    }

    @Override
    public Integer component2() {
        return getCourseIdcourse();
    }

    @Override
    public Double component3() {
        return getHours();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public Integer value1() {
        return getStaffIdstaff();
    }

    @Override
    public Integer value2() {
        return getCourseIdcourse();
    }

    @Override
    public Double value3() {
        return getHours();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public ReferentRecord value1(Integer value) {
        setStaffIdstaff(value);
        return this;
    }

    @Override
    public ReferentRecord value2(Integer value) {
        setCourseIdcourse(value);
        return this;
    }

    @Override
    public ReferentRecord value3(Double value) {
        setHours(value);
        return this;
    }

    @Override
    public ReferentRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public ReferentRecord values(Integer value1, Integer value2, Double value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ReferentRecord
     */
    public ReferentRecord() {
        super(Referent.REFERENT);
    }

    /**
     * Create a detached, initialised ReferentRecord
     */
    public ReferentRecord(Integer staffIdstaff, Integer courseIdcourse, Double hours, String type) {
        super(Referent.REFERENT);

        setStaffIdstaff(staffIdstaff);
        setCourseIdcourse(courseIdcourse);
        setHours(hours);
        setType(type);
    }
}

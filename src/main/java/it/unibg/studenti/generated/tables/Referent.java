/*
 * This file is generated by jOOQ.
 */
package it.unibg.studenti.generated.tables;


import it.unibg.studenti.generated.CourseManagement;
import it.unibg.studenti.generated.Indexes;
import it.unibg.studenti.generated.Keys;
import it.unibg.studenti.generated.tables.records.ReferentRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Referent extends TableImpl<ReferentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>course_management.referent</code>
     */
    public static final Referent REFERENT = new Referent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReferentRecord> getRecordType() {
        return ReferentRecord.class;
    }

    /**
     * The column <code>course_management.referent.staff_idstaff</code>.
     */
    public final TableField<ReferentRecord, Integer> STAFF_IDSTAFF = createField(DSL.name("staff_idstaff"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>course_management.referent.course_idcourse</code>.
     */
    public final TableField<ReferentRecord, Integer> COURSE_IDCOURSE = createField(DSL.name("course_idcourse"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>course_management.referent.hours</code>.
     */
    public final TableField<ReferentRecord, Double> HOURS = createField(DSL.name("hours"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.inline("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>course_management.referent.type</code>.
     */
    public final TableField<ReferentRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    private Referent(Name alias, Table<ReferentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Referent(Name alias, Table<ReferentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>course_management.referent</code> table reference
     */
    public Referent(String alias) {
        this(DSL.name(alias), REFERENT);
    }

    /**
     * Create an aliased <code>course_management.referent</code> table reference
     */
    public Referent(Name alias) {
        this(alias, REFERENT);
    }

    /**
     * Create a <code>course_management.referent</code> table reference
     */
    public Referent() {
        this(DSL.name("referent"), null);
    }

    public <O extends Record> Referent(Table<O> child, ForeignKey<O, ReferentRecord> key) {
        super(child, key, REFERENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : CourseManagement.COURSE_MANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.REFERENT_FK_STAFF_HAS_COURSE_COURSE1_IDX, Indexes.REFERENT_FK_STAFF_HAS_COURSE_STAFF1_IDX);
    }

    @Override
    public UniqueKey<ReferentRecord> getPrimaryKey() {
        return Keys.KEY_REFERENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ReferentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_REFERENT_FK_REFERENT_UQ);
    }

    @Override
    public List<ForeignKey<ReferentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_STAFF_HAS_COURSE_STAFF1, Keys.FK_STAFF_HAS_COURSE_COURSE1);
    }

    private transient Staff _staff;
    private transient Course _course;

    /**
     * Get the implicit join path to the <code>course_management.staff</code>
     * table.
     */
    public Staff staff() {
        if (_staff == null)
            _staff = new Staff(this, Keys.FK_STAFF_HAS_COURSE_STAFF1);

        return _staff;
    }

    /**
     * Get the implicit join path to the <code>course_management.course</code>
     * table.
     */
    public Course course() {
        if (_course == null)
            _course = new Course(this, Keys.FK_STAFF_HAS_COURSE_COURSE1);

        return _course;
    }

    @Override
    public Referent as(String alias) {
        return new Referent(DSL.name(alias), this);
    }

    @Override
    public Referent as(Name alias) {
        return new Referent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Referent rename(String name) {
        return new Referent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Referent rename(Name name) {
        return new Referent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Double, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package it.unibg.studenti.generated.tables.records;


import it.unibg.studenti.generated.tables.DegreeHasCourse;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DegreeHasCourseRecord extends UpdatableRecordImpl<DegreeHasCourseRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>course_management.degree_has_course.degree_iddegree</code>.
     */
    public void setDegreeIddegree(Integer value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>course_management.degree_has_course.degree_iddegree</code>.
     */
    public Integer getDegreeIddegree() {
        return (Integer) get(0);
    }

    /**
     * Setter for
     * <code>course_management.degree_has_course.course_idcourse</code>.
     */
    public void setCourseIdcourse(Integer value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>course_management.degree_has_course.course_idcourse</code>.
     */
    public Integer getCourseIdcourse() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return DegreeHasCourse.DEGREE_HAS_COURSE.DEGREE_IDDEGREE;
    }

    @Override
    public Field<Integer> field2() {
        return DegreeHasCourse.DEGREE_HAS_COURSE.COURSE_IDCOURSE;
    }

    @Override
    public Integer component1() {
        return getDegreeIddegree();
    }

    @Override
    public Integer component2() {
        return getCourseIdcourse();
    }

    @Override
    public Integer value1() {
        return getDegreeIddegree();
    }

    @Override
    public Integer value2() {
        return getCourseIdcourse();
    }

    @Override
    public DegreeHasCourseRecord value1(Integer value) {
        setDegreeIddegree(value);
        return this;
    }

    @Override
    public DegreeHasCourseRecord value2(Integer value) {
        setCourseIdcourse(value);
        return this;
    }

    @Override
    public DegreeHasCourseRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DegreeHasCourseRecord
     */
    public DegreeHasCourseRecord() {
        super(DegreeHasCourse.DEGREE_HAS_COURSE);
    }

    /**
     * Create a detached, initialised DegreeHasCourseRecord
     */
    public DegreeHasCourseRecord(Integer degreeIddegree, Integer courseIdcourse) {
        super(DegreeHasCourse.DEGREE_HAS_COURSE);

        setDegreeIddegree(degreeIddegree);
        setCourseIdcourse(courseIdcourse);
    }
}

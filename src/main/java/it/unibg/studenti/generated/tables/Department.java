/*
 * This file is generated by jOOQ.
 */
package it.unibg.studenti.generated.tables;


import it.unibg.studenti.generated.CourseManagement;
import it.unibg.studenti.generated.Keys;
import it.unibg.studenti.generated.tables.records.DepartmentRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Department extends TableImpl<DepartmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>course_management.department</code>
     */
    public static final Department DEPARTMENT = new Department();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartmentRecord> getRecordType() {
        return DepartmentRecord.class;
    }

    /**
     * The column <code>course_management.department.iddepartment</code>.
     */
    public final TableField<DepartmentRecord, Integer> IDDEPARTMENT = createField(DSL.name("iddepartment"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>course_management.department.name</code>.
     */
    public final TableField<DepartmentRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>course_management.department.description</code>.
     */
    public final TableField<DepartmentRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>course_management.department.city</code>.
     */
    public final TableField<DepartmentRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(90), this, "");

    /**
     * The column <code>course_management.department.streetname</code>.
     */
    public final TableField<DepartmentRecord, String> STREETNAME = createField(DSL.name("streetname"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>course_management.department.streetnumber</code>.
     */
    public final TableField<DepartmentRecord, String> STREETNUMBER = createField(DSL.name("streetnumber"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>course_management.department.zipcode</code>.
     */
    public final TableField<DepartmentRecord, String> ZIPCODE = createField(DSL.name("zipcode"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>course_management.department.phone</code>.
     */
    public final TableField<DepartmentRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(45), this, "");

    private Department(Name alias, Table<DepartmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Department(Name alias, Table<DepartmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>course_management.department</code> table
     * reference
     */
    public Department(String alias) {
        this(DSL.name(alias), DEPARTMENT);
    }

    /**
     * Create an aliased <code>course_management.department</code> table
     * reference
     */
    public Department(Name alias) {
        this(alias, DEPARTMENT);
    }

    /**
     * Create a <code>course_management.department</code> table reference
     */
    public Department() {
        this(DSL.name("department"), null);
    }

    public <O extends Record> Department(Table<O> child, ForeignKey<O, DepartmentRecord> key) {
        super(child, key, DEPARTMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : CourseManagement.COURSE_MANAGEMENT;
    }

    @Override
    public Identity<DepartmentRecord, Integer> getIdentity() {
        return (Identity<DepartmentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DepartmentRecord> getPrimaryKey() {
        return Keys.KEY_DEPARTMENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<DepartmentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DEPARTMENT_NAME_UNIQUE);
    }

    @Override
    public Department as(String alias) {
        return new Department(DSL.name(alias), this);
    }

    @Override
    public Department as(Name alias) {
        return new Department(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(String name) {
        return new Department(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Department rename(Name name) {
        return new Department(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}

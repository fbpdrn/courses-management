/*
 * This file is generated by jOOQ.
 */
package it.unibg.studenti.generated.tables;


import it.unibg.studenti.generated.CourseManagement;
import it.unibg.studenti.generated.Indexes;
import it.unibg.studenti.generated.Keys;
import it.unibg.studenti.generated.tables.records.DegreeHasCourseRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DegreeHasCourse extends TableImpl<DegreeHasCourseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>course_management.degree_has_course</code>
     */
    public static final DegreeHasCourse DEGREE_HAS_COURSE = new DegreeHasCourse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DegreeHasCourseRecord> getRecordType() {
        return DegreeHasCourseRecord.class;
    }

    /**
     * The column
     * <code>course_management.degree_has_course.degree_iddegree</code>.
     */
    public final TableField<DegreeHasCourseRecord, Integer> DEGREE_IDDEGREE = createField(DSL.name("degree_iddegree"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column
     * <code>course_management.degree_has_course.course_idcourse</code>.
     */
    public final TableField<DegreeHasCourseRecord, Integer> COURSE_IDCOURSE = createField(DSL.name("course_idcourse"), SQLDataType.INTEGER.nullable(false), this, "");

    private DegreeHasCourse(Name alias, Table<DegreeHasCourseRecord> aliased) {
        this(alias, aliased, null);
    }

    private DegreeHasCourse(Name alias, Table<DegreeHasCourseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>course_management.degree_has_course</code> table
     * reference
     */
    public DegreeHasCourse(String alias) {
        this(DSL.name(alias), DEGREE_HAS_COURSE);
    }

    /**
     * Create an aliased <code>course_management.degree_has_course</code> table
     * reference
     */
    public DegreeHasCourse(Name alias) {
        this(alias, DEGREE_HAS_COURSE);
    }

    /**
     * Create a <code>course_management.degree_has_course</code> table reference
     */
    public DegreeHasCourse() {
        this(DSL.name("degree_has_course"), null);
    }

    public <O extends Record> DegreeHasCourse(Table<O> child, ForeignKey<O, DegreeHasCourseRecord> key) {
        super(child, key, DEGREE_HAS_COURSE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : CourseManagement.COURSE_MANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.DEGREE_HAS_COURSE_FK_DEGREE_HAS_COURSE_COURSE1_IDX, Indexes.DEGREE_HAS_COURSE_FK_DEGREE_HAS_COURSE_DEGREE1_IDX);
    }

    @Override
    public UniqueKey<DegreeHasCourseRecord> getPrimaryKey() {
        return Keys.KEY_DEGREE_HAS_COURSE_PRIMARY;
    }

    @Override
    public List<UniqueKey<DegreeHasCourseRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_DEGREE_HAS_COURSE_FK_DEGREE_HAS_COURSE_UQ);
    }

    @Override
    public List<ForeignKey<DegreeHasCourseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_DEGREE_HAS_COURSE_DEGREE1, Keys.FK_DEGREE_HAS_COURSE_COURSE1);
    }

    private transient Degree _degree;
    private transient Course _course;

    /**
     * Get the implicit join path to the <code>course_management.degree</code>
     * table.
     */
    public Degree degree() {
        if (_degree == null)
            _degree = new Degree(this, Keys.FK_DEGREE_HAS_COURSE_DEGREE1);

        return _degree;
    }

    /**
     * Get the implicit join path to the <code>course_management.course</code>
     * table.
     */
    public Course course() {
        if (_course == null)
            _course = new Course(this, Keys.FK_DEGREE_HAS_COURSE_COURSE1);

        return _course;
    }

    @Override
    public DegreeHasCourse as(String alias) {
        return new DegreeHasCourse(DSL.name(alias), this);
    }

    @Override
    public DegreeHasCourse as(Name alias) {
        return new DegreeHasCourse(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DegreeHasCourse rename(String name) {
        return new DegreeHasCourse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DegreeHasCourse rename(Name name) {
        return new DegreeHasCourse(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}

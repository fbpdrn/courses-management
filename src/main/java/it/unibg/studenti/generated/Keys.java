/*
 * This file is generated by jOOQ.
 */
package it.unibg.studenti.generated;


import it.unibg.studenti.generated.tables.Course;
import it.unibg.studenti.generated.tables.Degree;
import it.unibg.studenti.generated.tables.DegreeHasCourse;
import it.unibg.studenti.generated.tables.Department;
import it.unibg.studenti.generated.tables.Referent;
import it.unibg.studenti.generated.tables.Staff;
import it.unibg.studenti.generated.tables.User;
import it.unibg.studenti.generated.tables.Year;
import it.unibg.studenti.generated.tables.records.CourseRecord;
import it.unibg.studenti.generated.tables.records.DegreeHasCourseRecord;
import it.unibg.studenti.generated.tables.records.DegreeRecord;
import it.unibg.studenti.generated.tables.records.DepartmentRecord;
import it.unibg.studenti.generated.tables.records.ReferentRecord;
import it.unibg.studenti.generated.tables.records.StaffRecord;
import it.unibg.studenti.generated.tables.records.UserRecord;
import it.unibg.studenti.generated.tables.records.YearRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * course_management.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CourseRecord> KEY_COURSE_PRIMARY = Internal.createUniqueKey(Course.COURSE, DSL.name("KEY_course_PRIMARY"), new TableField[] { Course.COURSE.IDCOURSE }, true);
    public static final UniqueKey<CourseRecord> KEY_COURSE_UQ_COURSES = Internal.createUniqueKey(Course.COURSE, DSL.name("KEY_course_uq_courses"), new TableField[] { Course.COURSE.CODE, Course.COURSE.SSD, Course.COURSE.YEAROFF }, true);
    public static final UniqueKey<DegreeRecord> KEY_DEGREE_PRIMARY = Internal.createUniqueKey(Degree.DEGREE, DSL.name("KEY_degree_PRIMARY"), new TableField[] { Degree.DEGREE.IDDEGREE, Degree.DEGREE.YEARID }, true);
    public static final UniqueKey<DegreeRecord> KEY_DEGREE_UQ_DEGREE = Internal.createUniqueKey(Degree.DEGREE, DSL.name("KEY_degree_uq_degree"), new TableField[] { Degree.DEGREE.CODE, Degree.DEGREE.YEARID, Degree.DEGREE.NAME }, true);
    public static final UniqueKey<DegreeHasCourseRecord> KEY_DEGREE_HAS_COURSE_FK_DEGREE_HAS_COURSE_UQ = Internal.createUniqueKey(DegreeHasCourse.DEGREE_HAS_COURSE, DSL.name("KEY_degree_has_course_fk_degree_has_course_uq"), new TableField[] { DegreeHasCourse.DEGREE_HAS_COURSE.DEGREE_IDDEGREE, DegreeHasCourse.DEGREE_HAS_COURSE.COURSE_IDCOURSE }, true);
    public static final UniqueKey<DegreeHasCourseRecord> KEY_DEGREE_HAS_COURSE_PRIMARY = Internal.createUniqueKey(DegreeHasCourse.DEGREE_HAS_COURSE, DSL.name("KEY_degree_has_course_PRIMARY"), new TableField[] { DegreeHasCourse.DEGREE_HAS_COURSE.DEGREE_IDDEGREE, DegreeHasCourse.DEGREE_HAS_COURSE.COURSE_IDCOURSE }, true);
    public static final UniqueKey<DepartmentRecord> KEY_DEPARTMENT_NAME_UNIQUE = Internal.createUniqueKey(Department.DEPARTMENT, DSL.name("KEY_department_name_UNIQUE"), new TableField[] { Department.DEPARTMENT.NAME }, true);
    public static final UniqueKey<DepartmentRecord> KEY_DEPARTMENT_PRIMARY = Internal.createUniqueKey(Department.DEPARTMENT, DSL.name("KEY_department_PRIMARY"), new TableField[] { Department.DEPARTMENT.IDDEPARTMENT }, true);
    public static final UniqueKey<ReferentRecord> KEY_REFERENT_FK_REFERENT_UQ = Internal.createUniqueKey(Referent.REFERENT, DSL.name("KEY_referent_fk_referent_uq"), new TableField[] { Referent.REFERENT.COURSE_IDCOURSE, Referent.REFERENT.STAFF_IDSTAFF, Referent.REFERENT.TYPE }, true);
    public static final UniqueKey<ReferentRecord> KEY_REFERENT_PRIMARY = Internal.createUniqueKey(Referent.REFERENT, DSL.name("KEY_referent_PRIMARY"), new TableField[] { Referent.REFERENT.STAFF_IDSTAFF, Referent.REFERENT.COURSE_IDCOURSE, Referent.REFERENT.TYPE }, true);
    public static final UniqueKey<StaffRecord> KEY_STAFF_EMAIL_UNIQUE = Internal.createUniqueKey(Staff.STAFF, DSL.name("KEY_staff_email_UNIQUE"), new TableField[] { Staff.STAFF.EMAIL }, true);
    public static final UniqueKey<StaffRecord> KEY_STAFF_PRIMARY = Internal.createUniqueKey(Staff.STAFF, DSL.name("KEY_staff_PRIMARY"), new TableField[] { Staff.STAFF.IDSTAFF }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.IDUSER }, true);
    public static final UniqueKey<UserRecord> KEY_USER_USERNAME_UNIQUE = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_username_UNIQUE"), new TableField[] { User.USER.USERNAME }, true);
    public static final UniqueKey<YearRecord> KEY_YEAR_PRIMARY = Internal.createUniqueKey(Year.YEAR, DSL.name("KEY_year_PRIMARY"), new TableField[] { Year.YEAR.IDYEAR }, true);
    public static final UniqueKey<YearRecord> KEY_YEAR_YEAR_UQ = Internal.createUniqueKey(Year.YEAR, DSL.name("KEY_year_year_uq"), new TableField[] { Year.YEAR.YEARSTART, Year.YEAR.YEAREND }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<DegreeRecord, YearRecord> FK_DEGREE_YEAR1 = Internal.createForeignKey(Degree.DEGREE, DSL.name("fk_degree_year1"), new TableField[] { Degree.DEGREE.YEARID }, Keys.KEY_YEAR_PRIMARY, new TableField[] { Year.YEAR.IDYEAR }, true);
    public static final ForeignKey<DegreeHasCourseRecord, CourseRecord> FK_DEGREE_HAS_COURSE_COURSE1 = Internal.createForeignKey(DegreeHasCourse.DEGREE_HAS_COURSE, DSL.name("fk_degree_has_course_course1"), new TableField[] { DegreeHasCourse.DEGREE_HAS_COURSE.COURSE_IDCOURSE }, Keys.KEY_COURSE_PRIMARY, new TableField[] { Course.COURSE.IDCOURSE }, true);
    public static final ForeignKey<DegreeHasCourseRecord, DegreeRecord> FK_DEGREE_HAS_COURSE_DEGREE1 = Internal.createForeignKey(DegreeHasCourse.DEGREE_HAS_COURSE, DSL.name("fk_degree_has_course_degree1"), new TableField[] { DegreeHasCourse.DEGREE_HAS_COURSE.DEGREE_IDDEGREE }, Keys.KEY_DEGREE_PRIMARY, new TableField[] { Degree.DEGREE.IDDEGREE }, true);
    public static final ForeignKey<ReferentRecord, CourseRecord> FK_STAFF_HAS_COURSE_COURSE1 = Internal.createForeignKey(Referent.REFERENT, DSL.name("fk_staff_has_course_course1"), new TableField[] { Referent.REFERENT.COURSE_IDCOURSE }, Keys.KEY_COURSE_PRIMARY, new TableField[] { Course.COURSE.IDCOURSE }, true);
    public static final ForeignKey<ReferentRecord, StaffRecord> FK_STAFF_HAS_COURSE_STAFF1 = Internal.createForeignKey(Referent.REFERENT, DSL.name("fk_staff_has_course_staff1"), new TableField[] { Referent.REFERENT.STAFF_IDSTAFF }, Keys.KEY_STAFF_PRIMARY, new TableField[] { Staff.STAFF.IDSTAFF }, true);
    public static final ForeignKey<StaffRecord, DepartmentRecord> FK_STAFF_DEPARTMENT1 = Internal.createForeignKey(Staff.STAFF, DSL.name("fk_staff_department1"), new TableField[] { Staff.STAFF.DEPARTMENTID }, Keys.KEY_DEPARTMENT_PRIMARY, new TableField[] { Department.DEPARTMENT.IDDEPARTMENT }, true);
}
